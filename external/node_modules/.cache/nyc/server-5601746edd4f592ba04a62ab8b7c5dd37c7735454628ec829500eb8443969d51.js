function cov_izmajeodh(){var path="/home/user202/ROIActivity2/external/server.js";var hash="0adbd6f02f294fd8e9567e7f7ad3606892ace690";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/user202/ROIActivity2/external/server.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:58}},"1":{start:{line:3,column:15},end:{line:3,column:80}},"2":{start:{line:7,column:16},end:{line:7,column:34}},"3":{start:{line:11,column:19},end:{line:11,column:41}},"4":{start:{line:17,column:15},end:{line:17,column:51}},"5":{start:{line:23,column:14},end:{line:23,column:32}},"6":{start:{line:26,column:12},end:{line:26,column:21}},"7":{start:{line:29,column:0},end:{line:29,column:30}},"8":{start:{line:30,column:0},end:{line:33,column:4}},"9":{start:{line:38,column:25},end:{line:38,column:67}},"10":{start:{line:42,column:0},end:{line:80,column:3}},"11":{start:{line:48,column:4},end:{line:78,column:11}},"12":{start:{line:56,column:12},end:{line:77,column:13}},"13":{start:{line:57,column:16},end:{line:57,column:45}},"14":{start:{line:58,column:16},end:{line:62,column:23}},"15":{start:{line:65,column:16},end:{line:65,column:45}},"16":{start:{line:66,column:16},end:{line:66,column:76}},"17":{start:{line:67,column:16},end:{line:67,column:34}},"18":{start:{line:68,column:16},end:{line:76,column:23}},"19":{start:{line:84,column:0},end:{line:111,column:7}},"20":{start:{line:93,column:8},end:{line:109,column:15}},"21":{start:{line:105,column:16},end:{line:105,column:45}},"22":{start:{line:106,column:16},end:{line:106,column:76}},"23":{start:{line:107,column:16},end:{line:107,column:34}},"24":{start:{line:108,column:16},end:{line:108,column:34}},"25":{start:{line:119,column:0},end:{line:122,column:3}},"26":{start:{line:120,column:4},end:{line:120,column:29}},"27":{start:{line:121,column:4},end:{line:121,column:51}},"28":{start:{line:125,column:13},end:{line:125,column:55}},"29":{start:{line:126,column:15},end:{line:131,column:2}},"30":{start:{line:127,column:17},end:{line:127,column:41}},"31":{start:{line:128,column:17},end:{line:128,column:38}},"32":{start:{line:130,column:4},end:{line:130,column:66}},"33":{start:{line:133,column:0},end:{line:133,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:42,column:13},end:{line:42,column:14}},loc:{start:{line:42,column:27},end:{line:80,column:1}},line:42},"1":{name:"(anonymous_1)",decl:{start:{line:55,column:8},end:{line:55,column:9}},loc:{start:{line:55,column:35},end:{line:78,column:9}},line:55},"2":{name:"(anonymous_2)",decl:{start:{line:87,column:4},end:{line:87,column:5}},loc:{start:{line:87,column:18},end:{line:111,column:5}},line:87},"3":{name:"(anonymous_3)",decl:{start:{line:102,column:12},end:{line:102,column:13}},loc:{start:{line:102,column:39},end:{line:109,column:13}},line:102},"4":{name:"(anonymous_4)",decl:{start:{line:119,column:8},end:{line:119,column:9}},loc:{start:{line:119,column:33},end:{line:122,column:1}},line:119},"5":{name:"(anonymous_5)",decl:{start:{line:126,column:32},end:{line:126,column:33}},loc:{start:{line:126,column:38},end:{line:131,column:1}},line:126}},branchMap:{"0":{loc:{start:{line:3,column:15},end:{line:3,column:80}},type:"cond-expr",locations:[{start:{line:3,column:36},end:{line:3,column:54}},{start:{line:3,column:57},end:{line:3,column:80}}],line:3},"1":{loc:{start:{line:56,column:12},end:{line:77,column:13}},type:"if",locations:[{start:{line:56,column:12},end:{line:77,column:13}},{start:{line:56,column:12},end:{line:77,column:13}}],line:56},"2":{loc:{start:{line:66,column:43},end:{line:66,column:74}},type:"binary-expr",locations:[{start:{line:66,column:43},end:{line:66,column:51}},{start:{line:66,column:55},end:{line:66,column:74}}],line:66},"3":{loc:{start:{line:106,column:43},end:{line:106,column:74}},type:"binary-expr",locations:[{start:{line:106,column:43},end:{line:106,column:51}},{start:{line:106,column:55},end:{line:106,column:74}}],line:106},"4":{loc:{start:{line:125,column:13},end:{line:125,column:55}},type:"cond-expr",locations:[{start:{line:125,column:32},end:{line:125,column:48}},{start:{line:125,column:51},end:{line:125,column:55}}],line:125}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"0adbd6f02f294fd8e9567e7f7ad3606892ace690"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_izmajeodh=function(){return actualCoverage;};}return actualCoverage;}cov_izmajeodh();cov_izmajeodh().s[0]++;console.log(`process.env.SERVER = ${process.env.SERVER}`);// get the environment variable, but default to localhost:8082 if its not set
const SERVER=(cov_izmajeodh().s[1]++,process.env.SERVER?(cov_izmajeodh().b[0][0]++,process.env.SERVER):(cov_izmajeodh().b[0][1]++,"http://localhost:8082"));// express is a nodejs web server
// https://www.npmjs.com/package/express
const express=(cov_izmajeodh().s[2]++,require('express'));// converts content in the request into parameter req.body
// https://www.npmjs.com/package/body-parser
const bodyParser=(cov_izmajeodh().s[3]++,require('body-parser'));// express-handlebars is a templating library 
// https://www.npmjs.com/package/express-handlebars
// - look inside the views folder for the templates
// data is inserted into a template inside {{ }}
const engine=(cov_izmajeodh().s[4]++,require('express-handlebars').engine);// request is used to make REST calls to the backend microservice
// details here: https://www.npmjs.com/package/request
var request=(cov_izmajeodh().s[5]++,require('request'));// create the server
const app=(cov_izmajeodh().s[6]++,express());// set up handlbars as the templating engine
cov_izmajeodh().s[7]++;app.set('view engine','hbs');cov_izmajeodh().s[8]++;app.engine('hbs',engine({extname:'hbs',defaultView:'default'}));// set up the parser to get the contents of data from html forms 
// this would be used in a POST to the server as follows:
// app.post('/route', urlencodedParser, (req, res) => {}
const urlencodedParser=(cov_izmajeodh().s[9]++,bodyParser.urlencoded({extended:false}));// defines a route that receives the request to /
cov_izmajeodh().s[10]++;app.get('/',(req,res)=>{cov_izmajeodh().f[0]++;cov_izmajeodh().s[11]++;// make a request to the backend microservice using the request package
// the URL for the backend service should be set in configuration 
// using an environment variable. Here, the variable is passed 
// to npm start inside package.json:
//  "start": "SERVER=http://localhost:8082 node server.js",
request.get(// first argument: url + return format
{url:SERVER+'/events',// the microservice end point for events
json:true// response from server will be json format
},// second argument: function with three args,
// runs when server response received
// body hold the return from the server
(error,response,body)=>{cov_izmajeodh().f[1]++;cov_izmajeodh().s[12]++;if(error){cov_izmajeodh().b[1][0]++;cov_izmajeodh().s[13]++;console.log('error:',error);// Print the error if one occurred
cov_izmajeodh().s[14]++;res.render('error_message',{layout:'default',//the outer html page
error:error// pass the data from the server to the template
});}else{cov_izmajeodh().b[1][1]++;cov_izmajeodh().s[15]++;console.log('error:',error);// Print the error if one occurred
cov_izmajeodh().s[16]++;console.log('statusCode:',(cov_izmajeodh().b[2][0]++,response)&&(cov_izmajeodh().b[2][1]++,response.statusCode));// Print the response status code if a response was received
cov_izmajeodh().s[17]++;console.log(body);// print the return from the server microservice
cov_izmajeodh().s[18]++;res.render('home',{layout:'default',//the outer html page
template:'index-template',// the partial view inserted into 
// {{body}} in the layout - the code
// in here inserts values from the JSON
// received from the server
events:body.events});// pass the data from the server to the template
}});});// defines a route that receives the post request to /event
cov_izmajeodh().s[19]++;app.post('/event',urlencodedParser,// second argument - how to parse the uploaded content
// into req.body
(req,res)=>{cov_izmajeodh().f[2]++;cov_izmajeodh().s[20]++;// make a request to the backend microservice using the request package
// the URL for the backend service should be set in configuration 
// using an environment variable. Here, the variable is passed 
// to npm start inside package.json:
//  "start": "SERVER=http://localhost:8082 node server.js",
request.post(// first argument: url + data + formats
{url:SERVER+'/event',// the microservice end point for adding an event
body:req.body,// content of the form
headers:{// uploading json
"Content-Type":"application/json"},json:true// response from server will be json format
},(error,response,body)=>{cov_izmajeodh().f[3]++;cov_izmajeodh().s[21]++;// third argument: function with three args,
// runs when server response received
// body hold the return from the server
console.log('error:',error);// Print the error if one occurred
cov_izmajeodh().s[22]++;console.log('statusCode:',(cov_izmajeodh().b[3][0]++,response)&&(cov_izmajeodh().b[3][1]++,response.statusCode));// Print the response status code if a response was received
cov_izmajeodh().s[23]++;console.log(body);// print the return from the server microservice
cov_izmajeodh().s[24]++;res.redirect("/");// redirect to the home page
});});// create other get and post methods here - version, login,  etc
// generic error handling
cov_izmajeodh().s[25]++;app.use((err,req,res,next)=>{cov_izmajeodh().f[4]++;cov_izmajeodh().s[26]++;console.error(err.stack);cov_izmajeodh().s[27]++;res.status(500).json({message:err.message});});// specify the port and start listening
const PORT=(cov_izmajeodh().s[28]++,process.env.PORT?(cov_izmajeodh().b[4][0]++,process.env.PORT):(cov_izmajeodh().b[4][1]++,8080));const server=(cov_izmajeodh().s[29]++,app.listen(PORT,()=>{cov_izmajeodh().f[5]++;const host=(cov_izmajeodh().s[30]++,server.address().address);const port=(cov_izmajeodh().s[31]++,server.address().port);cov_izmajeodh().s[32]++;console.log(`Events app listening at http://${host}:${port}`);}));cov_izmajeodh().s[33]++;module.exports=app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,